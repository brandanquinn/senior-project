# Module to house functions that interact with the NBA-API, parse data from responses, and save that data to relevant csv file.

import requests
import json
from datetime import datetime, timedelta

def get_yesterdays_date():
    """
        Generates a date string to get info for yesterdays NBA games using python datetime library.

        :return: Returns string in format: YYYYMMDD to be used in HTTP Requests

        - Brandan Quinn
        2/2/19 11:36am
    """

    return datetime.strftime(datetime.now() - timedelta(1), '%Y%m%d')

def get_todays_date():
    """
        Generates a date string to get info for today's coming NBA games. 

        :return: Returns string in format: YYYYMMDD to be used in HTTP Requests

        - Brandan Quinn
        2/1/19 1:49pm
    """

    d = datetime.today()
    month = str(d.month)
    day = str(d.day)
    if len(month) < 2:
        month = '0' + str(d.month)
    if len(day) < 2:
        day = '0' + str(d.day)

    return str(d.year) + month + day

def assess_accuracy(date_string, pred_list):
    """
        If games being predicted have already been played, gets results from NBA API and appends them to predictions to be returned to FE

        :param date_string: Date string received from react app to get games at given date.
        :param pred_list: List of predictions made by ML model
        :returns: Predictions list appended with actual game results.
    """
    games_played = get_game_list(date_string)

    actual_diffs = []

    for game in games_played:
        if game.get("statusNum") == 3:
            # If game has already been played.
            # point diff is hTeam.score - vTeam.score
            home_score = game.get("hTeam").get("score")
            away_score = game.get("vTeam").get("score")
            game_info = {}
            actual_diffs.append(int(home_score) - int(away_score))

    for i in range(len(actual_diffs)):
        pred_list[i]["actual-point-diff"] = actual_diffs[i]
        pred_list[i]["is-outcome-correct"] = (actual_diffs[i] > 0 and float(pred_list[i]["predicted-pointdiff"]) > 0) or (actual_diffs[i] < 0 and float(pred_list[i]["predicted-pointdiff"]) < 0)

    return pred_list


def get_game_list(date_string):
    """
        Uses date_string generated by above function to hit NBA api and get list of games played at date.

        :param date_string: string in the form: YYYYMMDD generated by get_todays_date()
        :return: Returns a list of games being played in order to get game ids, teams involved and stats.

        - Brandan Quinn
        2/1/19 1:51pm
    """

    response = requests.get('http://data.nba.net/10s/prod/v1/' + date_string + '/scoreboard.json')

    if response.status_code == 200:
        return response.json().get('games')
    else:
        return []

def generate_row_for_games_played(home_team, home_team_totals, away_team, away_team_totals):
    """
        Using stat totals retrieved from NBA-API, generates a list of stats 
        following format of the dataset. Used specifically for games that have been already played.

        :param home_team: Three letter representation of home team.
        :param home_team_totals: Dict containing stat totals for the home team.
        :param away_team: Three letter representation of away team.
        :param away_team_totals: Dict containing stat totals for the away team.
        :return: Returns list represnting the row of stats to be written to csv dataset.

        - Brandan Quinn
        2/1/19 1:56pm
    """

    home_team_score = int(home_team_totals.get('points'))
    away_team_score = int(away_team_totals.get('points'))

    outcome = ''

    print(home_team, " vs. ", away_team, ": ", home_team_score, away_team_score)

    if home_team_score > away_team_score:
        outcome = 'W'
    else:
        outcome = 'L'

    # List formatted to be easily written to dataset.
    return [
        '0',
        home_team,
        '',
        get_yesterdays_date(),
        'Home',
        away_team,
        outcome,
        home_team_score,
        away_team_score,
        home_team_totals.get('fgm'),
        home_team_totals.get('fga'),
        float(home_team_totals.get('fgp'))/100,
        home_team_totals.get('tpm'),
        home_team_totals.get('tpa'),
        float(home_team_totals.get('tpp'))/100,
        home_team_totals.get('ftm'),
        home_team_totals.get('fta'),
        float(home_team_totals.get('ftp'))/100,
        home_team_totals.get('offReb'),
        home_team_totals.get('totReb'),
        home_team_totals.get('assists'),
        home_team_totals.get('steals'),
        home_team_totals.get('blocks'),
        home_team_totals.get('turnovers'),
        home_team_totals.get('pFouls'),
        away_team_totals.get('fgm'),
        away_team_totals.get('fga'),
        float(away_team_totals.get('fgp'))/100,
        away_team_totals.get('tpm'),
        away_team_totals.get('tpa'),
        float(away_team_totals.get('tpp'))/100,
        away_team_totals.get('ftm'),
        away_team_totals.get('fta'),
        float(away_team_totals.get('ftp'))/100,
        away_team_totals.get('offReb'),
        away_team_totals.get('totReb'),
        away_team_totals.get('assists'),
        away_team_totals.get('steals'),
        away_team_totals.get('blocks'),
        away_team_totals.get('turnovers'),
        away_team_totals.get('pFouls')
    ]

def generate_row_with_season_averages(home_team, home_team_totals, away_team, away_team_totals):
    """
        Using stat totals retrieved from NBA_API, generates a list of stats following format of the dataset.
        Used specifically to predict games based on teams' season averages.

        :param home_team: Three letter representation of home team.
        :param home_team_totals: Dict containing stat totals for the home team.
        :param away_team: Three letter representation of away team.
        :param away_team_totals: Dict containing stat totals for the away team.
        :return: Returns list represnting the row of stats to be written to csv dataset.

        - Brandan Quinn
        2/3/19 4:17pm
    """

    home_team_score = float(home_team_totals.get('ppg').get('avg'))
    away_team_score = float(away_team_totals.get('ppg').get('avg'))

    outcome = ''

    print(home_team, " vs. ", away_team, ": ", home_team_score, away_team_score)

    if home_team_score > away_team_score:
        outcome = 'W'
    else:
        outcome = 'L'

    return [
        '0',
        home_team,
        '',
        get_todays_date(),
        'Home',
        away_team,
        outcome,
        home_team_score,
        away_team_score,
        'N/A',
        'N/A',
        home_team_totals.get('fgp').get('avg'),
        'N/A',
        'N/A',
        home_team_totals.get('tpp').get('avg'),
        'N/A',
        'N/A',
        'N/A',
        home_team_totals.get('orpg').get('avg'),
        home_team_totals.get('trpg').get('avg'),
        home_team_totals.get('apg').get('avg'),
        home_team_totals.get('spg').get('avg'),
        home_team_totals.get('bpg').get('avg'),
        home_team_totals.get('tpg').get('avg'),
        home_team_totals.get('pfpg').get('avg'),
        'N/A',
        'N/A',
        away_team_totals.get('fgp').get('avg'),
        'N/A',
        'N/A',
        away_team_totals.get('tpp').get('avg'),
        'N/A',
        'N/A',
        'N/A',
        away_team_totals.get('orpg').get('avg'),
        away_team_totals.get('trpg').get('avg'),
        away_team_totals.get('apg').get('avg'),
        away_team_totals.get('spg').get('avg'),
        away_team_totals.get('bpg').get('avg'),
        away_team_totals.get('tpg').get('avg'),
        away_team_totals.get('pfpg').get('avg')
    ]

def save_data(home_team, home_team_totals, away_team, away_team_totals, input):
    """
        Opens and writes to csv file using list returned from generate_row()

        :param home_team: Three letter representation of home team.
        :param home_team_totals: Dict containing stat totals for the home team.
        :param away_team: Three letter representation of away team.
        :param away_team_totals: Dict containing stat totals for the away team.
        :param input: Determines whether to write to dataset for training or predicting.

        - Brandan Quinn
        2/1/19 1:59pm
    """

    import csv
    if input == "predict":
        with open('nba.live.predict.csv', 'a') as csv_file:
            wr = csv.writer(csv_file, dialect='excel')
            row = generate_row_with_season_averages(home_team, home_team_totals, away_team, away_team_totals)
            print(row)
            wr.writerow(row)
    else:
        with open('nba.games.stats.csv', 'a') as csv_file:
            wr = csv.writer(csv_file, dialect='excel')
            row = generate_row_for_games_played(home_team, home_team_totals, away_team, away_team_totals)
            print(row)
            wr.writerow(row)

def find_team_stats(team_id, team_stats_list):
    """
       Given a specific team_id and a list of every team's season averages, return the season averages of team found with same id.
       :param team_id: Team ID found from game to be played.
       :param team_stats_list: List of season averages for every team in NBA, distinguised using team id
       :return: Returns object containing team found's season averages.

       - Brandan Quinn
       2/3/19 4:13pm 
    """

    for team_stats in team_stats_list:
        if team_stats.get("teamId") == team_id:
            print(team_stats.get("teamId"), " == ", team_id)
            print("Team found with stats: ", team_stats)
            return team_stats        

def get_stats(game_obj, date_string, game_id, home_team, away_team, input):
    """
        Uses date_string and game_id found above in order to request box_scores from NBA-API

        :param date_string: Date string generated in format YYYYMMDD
        :param game_id: Unique numerical ID for each game, used to hit endpoint.
        :param home_team: Three letter representation of home team.
        :param away_team: Three letter representation of away team.
        :return: Returns nothing.

        - Brandan Quinn
        2/1/19 2:03pm
    """

    if input == 'predict':
        # get team season averages
        home_team_id = game_obj.get('hTeam').get('teamId')
        away_team_id = game_obj.get('vTeam').get('teamId')
        season_stats = requests.get('http://data.nba.net/prod/v1/2018/team_stats_rankings.json')
        team_stats_list = season_stats.json().get('league').get('standard').get('regularSeason').get('teams')
        home_team_stats = find_team_stats(home_team_id, team_stats_list)
        away_team_stats = find_team_stats(away_team_id, team_stats_list)
        save_data(home_team, home_team_stats, away_team, away_team_stats, input)
    else:
        # get stats from games played
        box_score = requests.get('http://data.nba.net/prod/v1/' + date_string + '/' + game_id + '_boxscore.json')
        home_team_stats = box_score.json().get('stats').get('hTeam')
        away_team_stats = box_score.json().get('stats').get('vTeam')
        save_data(home_team, home_team_stats.get('totals'), away_team, away_team_stats.get('totals'), input)
    # print(home_team + ': ', box_score.json().get('stats').get('hTeam'))
    # print(away_team + ': ', box_score.json().get('stats').get('vTeam'))

def predict(date):
    """
        Called by Flask API to begin the game prediction process.

        :param date: Date string used to get list of games being played at date from NBA-API.
        :return: Returns nothing.

        - Brandan Quinn
        2/5/19 4:05pm
    """

    # If user inputs a year before 2000, do nothing.
    year = date[:4]
    # If user inputs a month thats outside the basketball season, do nothing.
    month = date[4:6]
    
    # if int(year) < 2000:
    #     return
    # elif int(month) > 7 and int(month) < 11:
    #     return

    # date = get_todays_date()
    game_list = get_game_list(date)

    for game in game_list:
        # print(game.keys())
        home_team = game.get('hTeam').get('triCode')
        away_team = game.get('vTeam').get('triCode')
        game_id = game.get('gameId')
        print('Checking game with id: ', game_id)
        get_stats(game, date, game_id, home_team, away_team, 'predict')

def predict_matchup(home_team_id, away_team_id):
    """
        Called by Flask API to get a prediction based on matchup selected by user.
        Gets season averages for each team and writes them to prediction csv file to be processed by model.

        :param home_team_id: ID used to get home team statistics from NBA API
        :param away_team_id: ID used to get away team statistics from NBA API
        :return: Returns nothing

        - Brandan Quinn
        5/1/19 4:41pm
    """
    season_stats = requests.get('http://data.nba.net/prod/v1/2018/team_stats_rankings.json')
    team_stats_list = season_stats.json().get('league').get('standard').get('regularSeason').get('teams')
    # print("TEAM STATS LIST", team_stats_list)
    home_team_stats = find_team_stats(home_team_id, team_stats_list)
    # print("HOME TEAM STATS", home_team_stats)
    away_team_stats = find_team_stats(away_team_id, team_stats_list)

    home_team = get_team_name(home_team_id)
    away_team = get_team_name(away_team_id)

    save_data(home_team, home_team_stats, away_team, away_team_stats, "predict")


def get_team_name(team_id):
    teams = requests.get('http://data.nba.net/').json().get('sports_content').get('teams').get('team')
    
    for team in teams:
        if team['team_id'] == int(team_id):
            print("TEAM FOUND:", team['team_abbrev'])
            return team['team_abbrev']

    # print("Teams list: ", teams)