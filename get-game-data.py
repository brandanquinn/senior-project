import requests
import json
from datetime import datetime, timedelta

# In order to get game stats:
#   1. Need to generate todays date string
#   2. Send request to 'http://data.nba.net/10s/prod/v1/{{date_string}}/scoreboard.json'
#   3. Get list of games from response.json().get('games')
#   4. For each element in games_list, game_id can be obtained from 'gameId' dict key
#   5. With gameId, send request to: 'http://data.nba.net/prod/v1/{{date_string}}/{{game_id}}_boxscore.json'
#   6. With response, pull of 'stats' key, and then 'hTeam'/'vTeam' keys to get individual team stats.

def get_yesterdays_date():
    ###
    # get_yesterdays_date()

    # NAME
    #   get_yesterdays_date
    #   - Generates a date string to get info for yesterdays NBA games

    # SYNOPSIS
    #   No args

    # DESCRIPTION
    #   - Uses python datetime library to generate a date object for yesterday's date.

    # RETURNS
    #   Returns string in format: YYYYMMDD to be used in HTTP Requests

    # AUTHOR
    #   Brandan Quinn

    # DATE
    #   02/02/19 11:36am

    return datetime.strftime(datetime.now() - timedelta(1), '%Y%m%d')

def get_todays_date():
    ###
    # get_todays_date()

    # NAME
    #   get_todays_date
    #   - Generates a date string to get info for today's coming NBA games.

    # SYNOPSIS
    #   No args

    # DESCRIPTION
    #   - Uses python datetime library to generate a date object for today's date.

    # RETURNS
    #   Returns string in format: YYYYMMDD to be used in HTTP Requests

    # AUTHOR
    #   Brandan Quinn

    # DATE
    #   02/01/19 1:49pm

    d = datetime.today()
    month = str(d.month)
    day = str(d.day)
    if len(month) < 2:
        month = '0' + str(d.month)
    if len(day) < 2:
        day = '0' + str(d.day)

    return str(d.year) + month + day

def get_game_list(date_string):
    ###
    # get_game_list(date_string)

    # NAME
    #   get_game_list
    #   - Uses date_string generated by above function to hit NBA api and get list of games played at date.

    # SYNOPSIS
    #   date_string:
    #   - string in the form: YYYYMMDD generated by get_todays_date()

    # DESCRIPTION
    #   - Use python requests library to hit NBA-API endpoint and return the games attribute of response

    # RETURNS
    #   Returns a list of games being played in order to get game ids, teams involved and stats.

    # AUTHOR
    #   Brandan Quinn

    # DATE
    #   02/01/19 1:51pm

    response = requests.get('http://data.nba.net/10s/prod/v1/' + date_string + '/scoreboard.json')

    return response.json().get('games')

def generate_row_for_games_played(home_team, home_team_totals, away_team, away_team_totals):
    ###
    # generate_row_for_games_played(home_team, home_team_totals, away_team, away_team_totals)

    # NAME
    #   generate_row_for_games_played
    #   - Using stat totals retrieved from NBA-API, generates a list of stats 
    #       following format of the dataset. Used specifically for games that have been already played.

    # SYNOPSIS
    #   home_team:
    #   - Three letter representation of home team.
    #   home_team_totals:
    #   - Dict containing stat totals for the home team.
    #   away_team:
    #   - Three letter representation of away team.
    #   away_team_totals:
    #   - Dict containing stat totals for the away team.

    # DESCRIPTION
    #   - In order to continue training Neural Network, I will need to add each game's stats
    #   to dataset. This function grabs each necessary stat and creates a list of them to be appended to csv dataset.
    #   - Follows the format of the csv file, omits some unncessary information for the project.

    # RETURNS
    #   List representing the row of stats to be written to csv dataset.

    # AUTHOR
    #   Brandan Quinn

    # DATE
    #   02/01/19 1:56pm

    csv_row = []
    csv_row.append('0')
    csv_row.append(home_team)
    csv_row.append('')
    csv_row.append(get_yesterdays_date())
    csv_row.append('Home')
    csv_row.append(away_team)

    home_team_score = int(home_team_totals.get('points'))
    away_team_score = int(away_team_totals.get('points'))

    outcome = ''

    print(home_team, " vs. ", away_team, ": ", home_team_score, away_team_score)

    if home_team_score > away_team_score:
        outcome = 'W'
    else:
        outcome = 'L'

    csv_row.append(outcome)
    csv_row.append(home_team_score)
    csv_row.append(away_team_score)
    csv_row.append(home_team_totals.get('fgm'))
    csv_row.append(home_team_totals.get('fga'))
    csv_row.append(float(home_team_totals.get('fgp'))/100)
    csv_row.append(home_team_totals.get('tpm'))
    csv_row.append(home_team_totals.get('tpa'))
    csv_row.append(float(home_team_totals.get('tpp'))/100)
    csv_row.append(home_team_totals.get('ftm'))
    csv_row.append(home_team_totals.get('fta'))
    csv_row.append(float(home_team_totals.get('ftp'))/100)
    csv_row.append(home_team_totals.get('offReb'))
    csv_row.append(home_team_totals.get('totReb'))
    csv_row.append(home_team_totals.get('assists'))
    csv_row.append(home_team_totals.get('steals'))
    csv_row.append(home_team_totals.get('blocks'))
    csv_row.append(home_team_totals.get('turnovers'))
    csv_row.append(home_team_totals.get('pFouls'))

    csv_row.append(away_team_totals.get('fgm'))
    csv_row.append(away_team_totals.get('fga'))
    csv_row.append(float(away_team_totals.get('fgp'))/100)
    csv_row.append(away_team_totals.get('tpm'))
    csv_row.append(away_team_totals.get('tpa'))
    csv_row.append(float(away_team_totals.get('tpp'))/100)
    csv_row.append(away_team_totals.get('ftm'))
    csv_row.append(away_team_totals.get('fta'))
    csv_row.append(float(away_team_totals.get('ftp'))/100)
    csv_row.append(away_team_totals.get('offReb'))
    csv_row.append(away_team_totals.get('totReb'))
    csv_row.append(away_team_totals.get('assists'))
    csv_row.append(away_team_totals.get('steals'))
    csv_row.append(away_team_totals.get('blocks'))
    csv_row.append(away_team_totals.get('turnovers'))
    csv_row.append(away_team_totals.get('pFouls'))

    return csv_row    

def generate_row_with_season_averages(home_team, home_team_totals, away_team, away_team_totals):
    ###
    # generate_row_with_season_averages(home_team, home_team_totals, away_team, away_team_totals)

    # NAME
    #   generate_row_with_season_averages
    #   - Using stat totals retrieved from NBA-API, generates a list of stats 
    #       following format of the dataset. Used specifically for games that have been already played.

    # SYNOPSIS
    #   home_team:
    #   - Three letter representation of home team.
    #   home_team_totals:
    #   - Dict containing stat totals for the home team.
    #   away_team:
    #   - Three letter representation of away team.
    #   away_team_totals:
    #   - Dict containing stat totals for the away team.

    # DESCRIPTION
    #   - In order to continue training Neural Network, I will need to add each game's stats
    #   to dataset. This function grabs each necessary stat and creates a list of them to be appended to csv dataset.
    #   - Follows the format of the csv file, omits some unncessary information for the project.

    # RETURNS
    #   List representing the row of stats to be written to csv dataset.

    # AUTHOR
    #   Brandan Quinn

    # DATE
    #   02/03/19 4:17pm

    home_team_score = float(home_team_totals.get('ppg').get('avg'))
    away_team_score = float(away_team_totals.get('ppg').get('avg'))

    outcome = ''

    print(home_team, " vs. ", away_team, ": ", home_team_score, away_team_score)

    if home_team_score > away_team_score:
        outcome = 'W'
    else:
        outcome = 'L'

    csv_row = [
        '0',
        home_team,
        '',
        get_todays_date(),
        'Home',
        away_team,
        outcome,
        home_team_score,
        away_team_score,
        'N/A',
        'N/A',
        home_team_totals.get('fgp').get('avg'),
        'N/A',
        'N/A',
        home_team_totals.get('tpp').get('avg'),
        'N/A',
        'N/A',
        'N/A',
        home_team_totals.get('orpg').get('avg'),
        home_team_totals.get('trpg').get('avg'),
        home_team_totals.get('apg').get('avg'),
        home_team_totals.get('spg').get('avg'),
        home_team_totals.get('bpg').get('avg'),
        home_team_totals.get('tpg').get('avg'),
        home_team_totals.get('pfpg').get('avg'),
        'N/A',
        'N/A',
        away_team_totals.get('fgp').get('avg'),
        'N/A',
        'N/A',
        away_team_totals.get('tpp').get('avg'),
        'N/A',
        'N/A',
        'N/A',
        away_team_totals.get('orpg').get('avg'),
        away_team_totals.get('trpg').get('avg'),
        away_team_totals.get('apg').get('avg'),
        away_team_totals.get('spg').get('avg'),
        away_team_totals.get('bpg').get('avg'),
        away_team_totals.get('tpg').get('avg'),
        away_team_totals.get('pfpg').get('avg')
    ]

    return csv_row

def save_data(home_team, home_team_totals, away_team, away_team_totals, input):
    ###
    # save_data(home_team, home_team_totals, away_team, away_team_totals)

    # NAME
    #   save_data
    #   - Opens and writes to csv file using list returned from generate_row()

    # SYNOPSIS
    #   home_team:
    #   - Three letter representation of home team.
    #   home_team_totals:
    #   - Dict containing stat totals for the home team.
    #   away_team:
    #   - Three letter representation of away team.
    #   away_team_totals:
    #   - Dict containing stat totals for the away team.

    # DESCRIPTION
    #   - Uses python csv library to open file and append to current data.
    #   - Writes the list as a row.

    # RETURNS
    #   None

    # AUTHOR
    #   Brandan Quinn

    # DATE
    #   02/01/19 1:59pm

    import csv
    if input == "predict":
        with open('nba.live.predict.csv', 'a') as csv_file:
            wr = csv.writer(csv_file, dialect='excel')
            row = generate_row_with_season_averages(home_team, home_team_totals, away_team, away_team_totals)
            print(row)
            wr.writerow(row)
    else:
        with open('nba.games.stats.csv', 'a') as csv_file:
            wr = csv.writer(csv_file, dialect='excel')
            row = generate_row_for_games_played(home_team, home_team_totals, away_team, away_team_totals)
            print(row)
            wr.writerow(row)

def find_team_stats(team_id, team_stats_list):
    ###
    # find_team_stats(team_id, team_stats_list)

    # NAME
    #   find_team_stats
    #   - Given a specific team_id and a list of every team's season averages, return the season averages of team found with same id.

    # SYNOPSIS
    #   team_id:
    #   - team_id found from game to be played.
    #   team_stats_list:
    #   - List of season averages for every team in NBA, distinguished using team_id

    # DESCRIPTION
    #   - For each team's stats, find the stats that match given team_id

    # RETURNS
    #   Returns object containing team found's season averages.

    # AUTHOR
    #   Brandan Quinn

    # DATE
    #   2/3/19 4:13pm

    for team_stats in team_stats_list:
        if team_stats.get("teamId") == team_id:
            print(team_stats.get("teamId"), " == ", team_id)
            print("Team found with stats: ", team_stats)
            return team_stats        

def get_stats(game_obj, date_string, game_id, home_team, away_team, input):
    ###
    # get_stats(date_string, game_id, home_team, away_team)

    # NAME
    #   get_stats
    #   - Uses date_string and game_id found above in order to request box_scores from NBA-API

    # SYNOPSIS
    #   date_string:
    #   - date_string generated in format YYYYMMDD
    #   game_id:
    #   - unique numerical id for each game, used to hit endpoint
    #   home_team:
    #   - three letter representation of home team.
    #   away_team:
    #   - three letter representation of away team.

    # DESCRIPTION
    #   - Hit boxscore endpoint of NBA-API using date_string and game_id
    #   - Pull off home_team_stats/away_team_stats dicts from box score response
    #   - Calls save_data to write data to dsv file.

    # RETURNS
    #   None

    # AUTHOR
    #   Brandan Quinn

    # DATE
    #   02/01/19 2:03pm

    if input == 'predict':
        # get team season averages
        home_team_id = game_obj.get('hTeam').get('teamId')
        away_team_id = game_obj.get('vTeam').get('teamId')
        season_stats = requests.get('http://data.nba.net/prod/v1/2018/team_stats_rankings.json')
        team_stats_list = season_stats.json().get('league').get('standard').get('regularSeason').get('teams')
        home_team_stats = find_team_stats(home_team_id, team_stats_list)
        away_team_stats = find_team_stats(away_team_id, team_stats_list)
        save_data(home_team, home_team_stats, away_team, away_team_stats, input)
    else:
        # get stats from games played
        box_score = requests.get('http://data.nba.net/prod/v1/' + date_string + '/' + game_id + '_boxscore.json')
        home_team_stats = box_score.json().get('stats').get('hTeam')
        away_team_stats = box_score.json().get('stats').get('vTeam')
        save_data(home_team, home_team_stats.get('totals'), away_team, away_team_stats.get('totals'), input)
    # print(home_team + ': ', box_score.json().get('stats').get('hTeam'))
    # print(away_team + ': ', box_score.json().get('stats').get('vTeam'))

user_input = input("(predict) or (gather) data? ")
date = ''

if user_input == "predict":
    date = get_todays_date()
elif user_input == "gather":
    date = get_yesterdays_date()
else:
    print("Invalid input. Try again.")
    exit()

# today = '20190131'


game_list = get_game_list(date)

for game in game_list:
    # print(game.keys())
    home_team = game.get('hTeam').get('triCode')
    away_team = game.get('vTeam').get('triCode')
    game_id = game.get('gameId')
    print('Checking game with id: ', game_id)
    get_stats(game, date, game_id, home_team, away_team, user_input)




# response = requests.get('http://data.nba.net/10s/prod/v1/20190131/scoreboard.json')

# games_list = response.json().get('games')

# game_id = games_list[0].get('gameId')
# today = '20190131'


# print(box_score.json().get('stats').get('hTeam'))